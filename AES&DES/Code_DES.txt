package lp3;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.AlgorithmParameterSpec;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;

public class des {
private static Cipher encryptCipher;
private static Cipher decryptCipher;
private static byte[] iv={11,22,33,44,99,88,77,66};
	public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IOException {
		// TODO Auto-generated method stub
    String st="E:\\st.txt";
    String ct="E:\\ct.txt";
    String ctst="E:\\stct.txt";

    SecretKey key = KeyGenerator.getInstance("DES").generateKey();
    AlgorithmParameterSpec paramspec=new IvParameterSpec(iv);
	
    encryptCipher=Cipher.getInstance("DES/CBC/PKCS5Padding");
    encryptCipher.init(Cipher.ENCRYPT_MODE,key,paramspec);
    
    decryptCipher=Cipher.getInstance("DES/CBC/PKCS5Padding");
    decryptCipher.init(Cipher.DECRYPT_MODE,key,paramspec);
    
    encrypt(new FileInputStream(st),new FileOutputStream(ct));
    decrypt(new FileInputStream(ct),new FileOutputStream(ctst));
	
    System.out.println("DONE");
	
	}

	private static void encrypt(InputStream is,OutputStream os) throws IOException{
		
		os=new CipherOutputStream(os,encryptCipher);
		writeData(is,os);
	}
	private static void decrypt(InputStream is,OutputStream os) throws IOException{
		
		is = new CipherInputStream(is,decryptCipher);
		writeData(is,os);
	}
	private static void writeData(InputStream is,OutputStream os) throws IOException{
		byte[] buf=new byte[1024];
		int n=0;
		while((n=is.read(buf))>=0)
		{
		os.write(buf,0,n);
		}
		os.close();
		is.close();
	}
}
